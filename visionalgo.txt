from sr.robot3 import *
import math
from math import *
robot = Robot()

def drive(distance, dir):
    power = 1
    speed = 1.767
    time = distance/speed
    if dir == "f":
        robot.motor_board.motors[0].power = power
        robot.motor_board.motors[1].power = power
        robot.sleep(time)
        robot.motor_board.motors[0].power = 0
        robot.motor_board.motors[1].power = 0

    elif dir == "b":
        robot.motor_board.motors[0].power = -power
        robot.motor_board.motors[1].power = -power
        robot.sleep(time)
        robot.motor_board.motors[0].power = 0
        robot.motor_board.motors[1].power = 0

    robot.sleep(1)

def close_jaw():
    robot.servo_board.servos[0].position = 0.6 #change these based on where you actually put servos in
    robot.servo_board.servos[1].position = 0.6 
    robot.sleep(0.2)
    robot.sleep(1)

def open_jaw():
    robot.servo_board.servos[0].position = -0.6
    robot.servo_board.servos[1].position = -0.6
    robot.sleep(0.2)
    robot.sleep(1)

def lifter(pos, dir):
    if dir == "up":
        robot.servo_board.servos[2].position = pos
        robot.sleep(pos)
    elif dir == "down":
        robot.servo_board.servos[2].position = -pos
        robot.sleep(pos)
    robot.sleep(1)



    

def turn(angle, direction):
    spinpower = 0.2
    n_spinpower = -spinpower
    runtime = 0.0078*angle

    if direction == "right":
        robot.motor_board.motors[0].power = spinpower          
        robot.motor_board.motors[1].power = n_spinpower        
        robot.sleep(runtime)
        robot.motor_board.motors[0].power = 0
        robot.motor_board.motors[1].power = 0
        robot.sleep(1)                                          
    
    
    if direction == "left":
        robot.motor_board.motors[1].power = spinpower
        robot.motor_board.motors[0].power = n_spinpower
        robot.sleep(runtime)
        robot.motor_board.motors[1].power = 0
        robot.motor_board.motors[0].power = 0
        robot.sleep(1)
        print("turned left")

    robot.sleep(1)


"""
def nearest_marker(step):
    not_detected = True
    already_picked = []
    while not_detected:
        marker_dict = {}
        markers = robot.camera.see()
        for marker in markers:
            keys = marker.id
            vals = (marker.position.distance)/1000 #in meters
            if keys >= 150 and keys <= 199: #asteroid markers are numbered 150-199
                marker_dict[keys] = vals
                
        closest_m_dist = min(marker_dict.values())
        for id_num in marker_dict.keys():
            if marker_dict[id_num] == closest_m_dist and id_num not in already_picked:
                print(f"The closest marker has id {id_num} and distance {closest_m_dist}")
                already_picked.append(id_num)
                not_detected = False
"""

def correct_pos(mark_num):
    markers = robot.camera.see()
    for marker in markers:
        if marker.id == mark_num:
            markdist = (marker.position.distance)/1000 #mm to m
            yaw_rad = marker.orientation.yaw
            yaw = math.degrees(yaw_rad) #assuming the yaw function is accurate
            d1 = markdist*(math.sin(yaw_rad)) #math.sin works only with rad :(
            d2 = math.sqrt((markdist**2)-(d1**2))
            if yaw_rad < 0: 
                turn((yaw*-1), "left")
                drive(d1, "f")
                turn(90, "left")
                drive(d2, "f") #you might wanna decrease this by a bit so it doesn't crash into the box i'm too lazy

            else:
                turn(yaw, "right")
                drive(d1, "f")
                turn(90, "right")
                drive(d2, "f") #decrease d2 so no crash
